# File: src/visualize_states.py
"""
Task 2b: Visualize Puzzle State Sequence.
Reads the sequence of puzzle states saved in a JSON file (e.g., 'states.json'
generated by part2a_solver.py) and generates a matplotlib figure showing
each step in the solution path. Saves the figure as an image file.
"""

import argparse
import json
import os
import sys
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import NullLocator # Good way to hide ticks

def render_state(ax, state: list[int]):
    """
    Renders a single 8-puzzle state onto a matplotlib Axes object.

    Args:
        ax (matplotlib.axes.Axes): The axes to draw on.
        state (list[int]): A list of 9 integers representing the puzzle state (0 is blank).
    """
    # Input validation
    if not isinstance(state, list) or len(state) != 9 or not all(isinstance(x, int) for x in state):
        ax.clear()
        ax.text(0.5, 0.5, "Invalid\nState", ha='center', va='center', fontsize=10, color='red')
        ax.set_xticks([])
        ax.set_yticks([])
        ax.set_xticklabels([])
        ax.set_yticklabels([])
        ax.set_facecolor('#f0f0f0') # Light gray background for invalid states
        # Draw border for consistency
        for spine in ax.spines.values():
            spine.set_edgecolor('black')
            spine.set_linewidth(1.5)
        return

    grid = np.array(state).reshape(3, 3)

    # Clear previous content and hide ticks/labels
    ax.clear()
    ax.set_xticks([])
    ax.set_yticks([])
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    ax.xaxis.set_major_locator(NullLocator()) # More robust way to hide ticks
    ax.yaxis.set_major_locator(NullLocator())
    ax.set_facecolor('white') # Ensure valid states have white background

    # Set limits and aspect ratio
    ax.set_xlim(0, 3)
    ax.set_ylim(0, 3)
    ax.invert_yaxis() # Origin top-left
    ax.set_aspect('equal', adjustable='box')

    # Draw grid lines
    for i in range(4):
        ax.axhline(i, color='black', linewidth=1.5, zorder=1) # Ensure lines are visible
        ax.axvline(i, color='black', linewidth=1.5, zorder=1)

    # Draw numbers (skip 0 for blank)
    for i in range(3): # row
        for j in range(3): # col
            value = grid[i, j]
            if value != 0:
                ax.text(j + 0.5, i + 0.5, str(value),
                        ha='center', va='center', fontsize=16, weight='bold', zorder=2) # Ensure text is above grid

def visualize_state_sequence(states_json_path: str, output_image_path: str = 'visualization.png'):
    """
    Loads a sequence of states from a JSON file and generates a visualization.

    Args:
        states_json_path (str): Path to the input JSON file (expecting {"states": [[...], ...]}).
        output_image_path (str, optional): Path to save the output PNG image.
                                            Defaults to 'visualization.png'.
    """
    # --- Load Data ---
    try:
        with open(states_json_path, 'r') as f:
            data = json.load(f)
        # Expecting a dictionary with a "states" key containing a list of lists
        states = data.get('states')
        if states is None:
             raise KeyError("'states' key not found in JSON file.")
        if not isinstance(states, list):
             raise TypeError("'states' value in JSON must be a list.")
        if not states:
             print(f"Warning: No states found in '{states_json_path}'. Cannot visualize.")
             return # Nothing to visualize
        # Further validation of inner lists happens in render_state
    except FileNotFoundError:
        print(f"Error: State file not found at '{states_json_path}'")
        sys.exit(1)
    except (json.JSONDecodeError, KeyError, TypeError) as e:
        print(f"Error loading or parsing states from '{states_json_path}': {e}")
        sys.exit(1)
    except Exception as e:
         print(f"An unexpected error occurred loading the JSON file: {e}")
         sys.exit(1)
    # --- Data Loaded ---

    print(f"Visualizing {len(states)} states from '{states_json_path}'...")

    # --- Create Plot ---
    num_states = len(states)
    # Determine layout (e.g., try to fit in rows of ~5-8 plots for better readability)
    cols = min(num_states, 8) # Adjust max columns as needed
    rows = (num_states + cols - 1) // cols # Calculate required rows

    # Adjust figsize based on cols/rows to prevent tiny plots
    fig_width = max(10, cols * 2.0) # Min width 10 inches
    fig_height = max(4, rows * 2.2) # Min height 4 inches
    fig, axes = plt.subplots(rows, cols, figsize=(fig_width, fig_height), squeeze=False) # Ensure axes is always 2D
    axes_flat = axes.flatten() # Flatten for easy iteration

    # Render each state
    for i, state in enumerate(states):
        render_state(axes_flat[i], state)
        axes_flat[i].set_title(f"Step {i}", fontsize=10) # Add step number

    # Hide unused subplots
    for j in range(num_states, len(axes_flat)):
        axes_flat[j].axis('off') # Turn off axis for unused plots

    # --- Finalize and Save ---
    # Add a descriptive title using the input filename
    base_filename = os.path.basename(states_json_path)
    fig.suptitle(f"8-Puzzle Solution Steps ({base_filename})", fontsize=16, y=0.98) # Adjust y to prevent overlap

    # Improve layout
    plt.tight_layout(rect=[0, 0.03, 1, 0.95]) # Adjust rect to make space for suptitle

    try:
        # Ensure output directory exists
        output_dir = os.path.dirname(output_image_path)
        if output_dir and not os.path.exists(output_dir):
             print(f"Creating output directory: {output_dir}")
             os.makedirs(output_dir, exist_ok=True)

        # Save the figure
        plt.savefig(output_image_path, dpi=150) # Increase DPI for better quality if needed
        print(f"Visualization saved successfully to '{output_image_path}'")
    except IOError as e:
         print(f"Error saving visualization to '{output_image_path}': {e}")
         sys.exit(1)
    except Exception as e:
         print(f"An unexpected error occurred saving the visualization: {e}")
         sys.exit(1)
    finally:
        # Close the figure to free memory, especially important in loops or long scripts
        plt.close(fig)

def main():
    """
    Main function to parse arguments and run the visualization.
    """
    parser = argparse.ArgumentParser(
        description="Task 2b: Visualize 8-Puzzle state sequence from JSON file.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        "states_json", # Positional argument for the input file
        type=str,
        help="Path to the input JSON file containing the state sequence (e.g., 'states.json')."
    )
    parser.add_argument(
        "--output",
        type=str,
        default="visualization.png",
        help="Path to save the output visualization image file."
    )
    args = parser.parse_args()

    # Basic check for input file existence before calling the main function
    if not os.path.exists(args.states_json):
        print(f"Error: Input JSON file not found at '{args.states_json}'")
        sys.exit(1)

    visualize_state_sequence(args.states_json, args.output)

if __name__ == "__main__":
    main()
